name: Release and Publish to NPM

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  check-permissions:
    runs-on: ubuntu-latest
    outputs:
      is-collaborator: ${{ steps.check.outputs.is-collaborator }}
    steps:
      - name: Check if user is collaborator
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const response = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });
              
              const permission = response.data.permission;
              const isCollaborator = ['admin', 'write', 'maintain'].includes(permission);
              
              core.setOutput('is-collaborator', isCollaborator);
              
              if (!isCollaborator) {
                core.setFailed(`User ${context.actor} does not have sufficient permissions. Required: admin, write, or maintain. Current: ${permission}`);
              }
            } catch (error) {
              core.setFailed(`Failed to check permissions: ${error.message}`);
            }

  release-and-publish:
    needs: check-permissions
    if: needs.check-permissions.outputs.is-collaborator == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get default branch
        id: branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default-branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Using branch: $DEFAULT_BRANCH"

      - name: Install dependencies
        run: |
          if [ -f "package-lock.json" ] || [ -f "npm-shrinkwrap.json" ]; then
            npm ci
          else
            npm install
          fi

      - name: Run tests (if available)
        run: |
          if npm run test --dry-run 2>/dev/null; then
            npm test
          else
            echo "No tests found, skipping..."
          fi

      - name: Determine version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          if [ -n "${{ inputs.custom_version }}" ]; then
            NEW_VERSION="${{ inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else
            # Check if current version already matches what we want to bump to
            if [ "${{ inputs.version_type }}" = "patch" ]; then
              EXPECTED_VERSION=$(node -p "
                const semver = require('semver');
                const pkg = require('./package.json');
                semver.inc(pkg.version, 'patch');
              " 2>/dev/null || echo "")
              
              if [ -z "$EXPECTED_VERSION" ]; then
                # Fallback if semver is not available
                IFS='.' read -ra ADDR <<< "$CURRENT_VERSION"
                PATCH=$((${ADDR[2]} + 1))
                EXPECTED_VERSION="${ADDR[0]}.${ADDR[1]}.$PATCH"
              fi
            elif [ "${{ inputs.version_type }}" = "minor" ]; then
              EXPECTED_VERSION=$(node -p "
                const semver = require('semver');
                const pkg = require('./package.json');
                semver.inc(pkg.version, 'minor');
              " 2>/dev/null || echo "")
              
              if [ -z "$EXPECTED_VERSION" ]; then
                IFS='.' read -ra ADDR <<< "$CURRENT_VERSION"
                MINOR=$((${ADDR[1]} + 1))
                EXPECTED_VERSION="${ADDR[0]}.$MINOR.0"
              fi
            else # major
              EXPECTED_VERSION=$(node -p "
                const semver = require('semver');
                const pkg = require('./package.json');
                semver.inc(pkg.version, 'major');
              " 2>/dev/null || echo "")
              
              if [ -z "$EXPECTED_VERSION" ]; then
                IFS='.' read -ra ADDR <<< "$CURRENT_VERSION"
                MAJOR=$((${ADDR[0]} + 1))
                EXPECTED_VERSION="$MAJOR.0.0"
              fi
            fi
            
            if [ "$CURRENT_VERSION" = "$EXPECTED_VERSION" ]; then
              echo "Version is already at expected ${{ inputs.version_type }} version: $CURRENT_VERSION"
              NEW_VERSION="$CURRENT_VERSION"
            else
              npm version ${{ inputs.version_type }} --no-git-tag-version
              NEW_VERSION=$(node -p "require('./package.json').version")
              echo "Bumped version to: $NEW_VERSION"
            fi
          fi
          
          # If custom version is specified and different from current, update it
          if [ -n "${{ inputs.custom_version }}" ] && [ "$CURRENT_VERSION" != "${{ inputs.custom_version }}" ]; then
            npm version ${{ inputs.custom_version }} --no-git-tag-version
            NEW_VERSION="${{ inputs.custom_version }}"
          fi
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Check if version already exists on npm
        id: npm-check
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          if npm view "$PACKAGE_NAME@$NEW_VERSION" version 2>/dev/null; then
            echo "version-exists=true" >> $GITHUB_OUTPUT
            echo "❌ Version $NEW_VERSION already exists on npm registry!"
            exit 1
          else
            echo "version-exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $NEW_VERSION is available on npm registry"
          fi

      - name: Generate changelog entry
        id: changelog
        run: |
          CURRENT_DATE=$(date +"%Y-%m-%d")
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          
          if [ -n "${{ inputs.release_notes }}" ]; then
            CHANGELOG_ENTRY="## [$NEW_VERSION] - $CURRENT_DATE
          
          ${{ inputs.release_notes }}"
          else
            CHANGELOG_ENTRY="## [$NEW_VERSION] - $CURRENT_DATE
          
          ### Added
          - Automated release via GitHub Actions
          
          ### Changed
          - Version bump to $NEW_VERSION"
          fi
          
          if [ -f "CHANGELOG.md" ]; then
            echo "$CHANGELOG_ENTRY" > temp_changelog.md
            echo "" >> temp_changelog.md
            tail -n +4 CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          fi
          
          {
            echo "release-notes<<EOF"
            echo "$CHANGELOG_ENTRY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Check if there are changes to commit
        id: git-check
        run: |
          git add package.json
          if [ -f "package-lock.json" ]; then
            git add package-lock.json
          fi
          if [ -f "CHANGELOG.md" ]; then
            git add CHANGELOG.md
          fi
          
          if git diff --staged --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected, will commit"
          fi

      - name: Commit version changes
        if: steps.git-check.outputs.has-changes == 'true'
        run: |
          git commit -m "chore: bump version to v${{ steps.version.outputs.new-version }}"

      - name: Create Git tag
        run: |
          # Check if tag already exists
          if git rev-parse "v${{ steps.version.outputs.new-version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.version.outputs.new-version }} already exists, deleting it first"
            git tag -d "v${{ steps.version.outputs.new-version }}"
            git push origin ":refs/tags/v${{ steps.version.outputs.new-version }}" || true
          fi
          git tag -a "v${{ steps.version.outputs.new-version }}" -m "Release v${{ steps.version.outputs.new-version }}"

      - name: Push changes and tags
        run: |
          git push origin ${{ steps.branch.outputs.default-branch }}
          git push origin "v${{ steps.version.outputs.new-version }}"

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            // Check if release already exists
            try {
              const existingRelease = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: 'v${{ steps.version.outputs.new-version }}'
              });
              
              if (existingRelease.data) {
                console.log('Release already exists, updating it...');
                const updatedRelease = await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.data.id,
                  name: 'Release v${{ steps.version.outputs.new-version }}',
                  body: `${{ steps.changelog.outputs.release-notes }}`,
                  draft: false,
                  prerelease: false
                });
                console.log(`Updated release: ${updatedRelease.data.html_url}`);
                return;
              }
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }
            
            // Create new release if it doesn't exist
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.version.outputs.new-version }}',
              name: 'Release v${{ steps.version.outputs.new-version }}',
              body: `${{ steps.changelog.outputs.release-notes }}`,
              draft: false,
              prerelease: false
            });
            
            console.log(`Created release: ${release.data.html_url}`);

      - name: Publish to NPM
        run: npm publish --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Success notification
        run: |
          echo "🎉 Successfully released v${{ steps.version.outputs.new-version }}!"
          echo "📦 Package published to NPM"
          echo "🏷️ Git tag created: v${{ steps.version.outputs.new-version }}"
          echo "📋 GitHub release created"

  notify-failure:
    needs: [check-permissions, release-and-publish]
    if: always() && (needs.check-permissions.result == 'failure' || needs.release-and-publish.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Failure notification
        run: |
          if [ "${{ needs.check-permissions.result }}" == "failure" ]; then
            echo "❌ Permission check failed: Only repository collaborators can run this workflow"
          elif [ "${{ needs.release-and-publish.result }}" == "failure" ]; then
            echo "❌ Release and publish failed. Check the logs above for details."
          fi
          exit 1